---
import { db, Comment, eq, desc } from "astro:db";
import CommentItem from "./CommentItem.astro";

interface CommentType {
  id: number;
  postSlug: string;
  name: string;
  message: string;
  createdAt: Date;
  parentId: number;
  email?: string;
  children?: CommentType[];
}

interface Props {
  postSlug: string;
}

const { postSlug } = Astro.props as Props;

// Fetch comments
const comments = await db
  .select()
  .from(Comment)
  .where(eq(Comment.postSlug, postSlug))
  .orderBy(desc(Comment.createdAt)) as CommentType[];

// Helper function to organize comments into parent-child relationships
const nestComments = (comments: CommentType[]): CommentType[] => {
  const commentMap = new Map<number, CommentType>();
  const roots: CommentType[] = [];

  // Create a map for quick lookup
  comments.forEach(comment => commentMap.set(comment.id, { ...comment, children: [] }));

  comments.forEach(comment => {
    if (comment.parentId === -1) {
      roots.push(commentMap.get(comment.id)!);
    } else {
      const parent = commentMap.get(comment.parentId);
      if (parent) {
        // unshift so replies are in chronological order
        parent.children!.unshift(commentMap.get(comment.id)!);
      }
    }
  });

  // console.log("Nested Comments:", roots); // for debugging
  return roots;
};

const nestedComments = nestComments(comments);
---

<!-- Render Comments -->
<div class="space-y-4">
  {nestedComments.map((comment) => (
    <CommentItem comment={comment} />
  ))}
</div>